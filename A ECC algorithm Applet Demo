/**
 * @file ecc192.java
*/
package ecc192;

import javacard.framework.Applet;
import javacard.framework.ISO7816;
import javacard.framework.ISOException;
import javacard.framework.APDU;
import javacard.framework.JCSystem;
import javacard.framework.Util;
import javacard.security.ECPrivateKey;
import javacard.security.ECPublicKey;
import javacard.security.KeyBuilder;
import javacard.security.*;
import javacard.security.Signature;
import javacard.security.KeyAgreement;

public class ECC192 extends Applet
{
    final static byte EC_INS_GETA  =  (byte)0x00;
    final static byte EC_INS_GETP  =  (byte)0x01;
    final static byte EC_INS_GETS  =  (byte)0x02;
    final static byte EC_INS_GETW  =  (byte)0x03;
    final static byte EC_INS_SIG_SIGN_VERIFY  =  (byte)0x04;
    final static byte EC_INS_SETS_SIGN  =  (byte)0x50;
    final static byte EC_INS_SETW_VERIFY  =  (byte)0x51;
    final static byte EC_INS_GENERATESECRET  =  (byte)0x55;
    final static byte EC_INS_DADKEY1_SETS  =  (byte)0x61;
    final static byte EC_INS_DADKEY2_SETS  =  (byte)0x62;
    final static byte EC_INS_DADKEY_SETW  =  (byte)0x63;
    private KeyAgreement ka;
    private KeyPair eccKey;
    private Signature ecdsa;
    
    private byte ec_priKey[] = new byte[]{
            (byte)0x1F,(byte)0x08,(byte)0xA0,(byte)0xFC,(byte)0xB0,(byte)0xAB,(byte)0x04,(byte)0x34,
            (byte)0xCE,(byte)0x71,(byte)0xC6,(byte)0x2B,(byte)0x9D,(byte)0x15,(byte)0xFA,(byte)0x02,
            (byte)0xF0,(byte)0x32,(byte)0x6A,(byte)0xEC,(byte)0xD0,(byte)0xF4,(byte)0x0C,(byte)0x34
    };
    private byte ec_pubKey[] = new byte[]{
            (byte)0x04,(byte)0xFE,(byte)0x31,(byte)0x34,(byte)0x94,(byte)0xCA,(byte)0x87,(byte)0xD2,
            (byte)0x7A,(byte)0xF9,(byte)0x37,(byte)0x11,(byte)0xBD,(byte)0xBF,(byte)0xE7,(byte)0xCE,
            (byte)0x37,(byte)0x8D,(byte)0x04,(byte)0xF4,(byte)0x94,(byte)0xA0,(byte)0xA2,(byte)0xAA,
            (byte)0xD5,(byte)0xB3,(byte)0x94,(byte)0xC1,(byte)0x33,(byte)0xE4,(byte)0x3B,(byte)0x26,
            (byte)0x5D,(byte)0xE5,(byte)0xC0,(byte)0xB3,(byte)0x03,(byte)0xE1,(byte)0xFC,(byte)0x54,
            (byte)0xAC,(byte)0x9B,(byte)0x2D,(byte)0x44,(byte)0xE7,(byte)0x09,(byte)0x56,(byte)0x79,
            (byte)0x18
    };
    private byte ec_bad_priKey1[] = new byte[]{(byte)0x00};
    private byte ec_bad_priKey2[] = new byte[]{
            (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF,
            (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFE, 
            (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF
    };
    private byte ec_bad_pubKey[] = new byte[]{
            (byte)0x04,(byte)0xFE,(byte)0x31,(byte)0x34,(byte)0x94,(byte)0xCA,(byte)0x87,(byte)0xD2,
            (byte)0x7A,(byte)0xF9,(byte)0x37,(byte)0x11,(byte)0xBD,(byte)0xBF,(byte)0xE7,(byte)0xCE,
            (byte)0x37,(byte)0x8D,(byte)0x04,(byte)0xF4,(byte)0x94,(byte)0xA0,(byte)0xA2,(byte)0xAA,
            (byte)0xD5,(byte)0xB3,(byte)0x94,(byte)0xC1,(byte)0x33,(byte)0xE4,(byte)0x3B,(byte)0x26,
            (byte)0x5D,(byte)0xE5,(byte)0xC0,(byte)0xB3,(byte)0x03,(byte)0xE1,(byte)0xFC,(byte)0x54,
            (byte)0xAC,(byte)0x9B,(byte)0x2D,(byte)0x44,(byte)0xE7,(byte)0x09,(byte)0x56,(byte)0x79,
            (byte)0x19
    };
    
    private byte sigbuf[];
    private byte plain[] = {1,2,3,4,5,6,7,8};
    private short siglen;
    
    public ECC192() 
    {
        eccKey = new KeyPair(KeyPair.ALG_EC_FP, KeyBuilder.LENGTH_EC_FP_192);
        ecdsa = Signature.getInstance(Signature.ALG_ECDSA_SHA, false);
        sigbuf = JCSystem.makeTransientByteArray((short)64, JCSystem.CLEAR_ON_DESELECT);
        ka = KeyAgreement.getInstance(KeyAgreement.ALG_EC_SVDP_DH, false);    
    }
    

    public static void install(byte[] bArray, short bOffset, byte bLength)
    {
        // GP-compliant JavaCard applet registration
        new ECC192().register(bArray, (short) (bOffset + 1), bArray[bOffset]);
    }

    public void process(APDU apdu)
    {
        short len;
        // Good practice: Return 9000 on SELECT
        if (selectingApplet())
        {
            return;
        }

        byte[] buf = apdu.getBuffer();
        switch (buf[ISO7816.OFFSET_INS])
        {
        case EC_INS_GETA: 
            eccKey.genKeyPair();
            ((ECPrivateKey)eccKey.getPrivate()).getA(buf, (short)0);
            apdu.setOutgoingAndSend((short)0, (short)24);
            break;
        case EC_INS_GETP:
            ((ECPrivateKey)eccKey.getPrivate()).getField(buf, (short)0);
            apdu.setOutgoingAndSend((short)0, (short)24);
            break;
        case EC_INS_GETS:
            len = ((ECPrivateKey)eccKey.getPrivate()).getS(buf, (short)0);
            apdu.setOutgoingAndSend((short)0, len);
            break;
        case EC_INS_GETW:
            len = ((ECPublicKey)eccKey.getPublic()).getW(buf,(short)0);
            apdu.setOutgoingAndSend((short)0, len);
            break;
        case EC_INS_SIG_SIGN_VERIFY:  //04
            ecdsa.init(eccKey.getPrivate(), Signature.MODE_SIGN);
            len = ecdsa.sign(plain, (short)0, (short)plain.length, buf, (short)0);
            ecdsa.init(eccKey.getPublic(), Signature.MODE_VERIFY);
            if (!ecdsa.verify(plain, (short)0, (short)plain.length, buf, (short)0, len))
                ISOException.throwIt((short)0x6a95);
            break;
        case EC_INS_SETS_SIGN:

            ((ECPrivateKey)eccKey.getPrivate()).setS(ec_priKey,(short)0,(short)ec_priKey.length);
            ecdsa.init(eccKey.getPrivate(), Signature.MODE_SIGN);
            len = ecdsa.sign(plain, (short)0, (short)plain.length, buf, (short)0);
            Util.arrayCopyNonAtomic(buf,(short) 0, sigbuf, (short)0, len);
            siglen = len;
            apdu.setOutgoingAndSend((short)0, len);
            break;
        case EC_INS_SETW_VERIFY:
            ((ECPublicKey)eccKey.getPublic()).setW(ec_pubKey, (short)0, (short)ec_pubKey.length);
            ecdsa.init(eccKey.getPublic(), Signature.MODE_VERIFY);
            if ( !ecdsa.verify(plain, (short)0, (short)plain.length, sigbuf, (short)0, siglen))
                ISOException.throwIt((short)0x6a95);
            break;
        case EC_INS_GENERATESECRET:
            ka.init(eccKey.getPrivate());
            len = ka.generateSecret(ec_pubKey, (short)0, (short)ec_pubKey.length, buf, (short)0);
            apdu.setOutgoingAndSend((short)0, len); 

            break;
        case EC_INS_DADKEY1_SETS: //test illegal private key 61
            ((ECPrivateKey)eccKey.getPrivate()).setS(ec_bad_priKey1, (short)0, (short)ec_bad_priKey1.length);
            try
            {
                ecdsa.init(eccKey.getPrivate(), Signature.MODE_SIGN);
            }catch(CryptoException e)
            {
                if (e.getReason() == CryptoException.ILLEGAL_VALUE)
                    break;
            }
            ISOException.throwIt((short)0x6a91);
        case EC_INS_DADKEY2_SETS: //test illegal private key  62
            ((ECPrivateKey)eccKey.getPrivate()).setS(ec_bad_priKey2, (short)0, (short)ec_bad_priKey2.length);
            try
            {
                ecdsa.init(eccKey.getPrivate(), Signature.MODE_SIGN);
            }catch(CryptoException e)
            {
                if (e.getReason() == CryptoException.ILLEGAL_VALUE)
                    break;
            }
            ISOException.throwIt((short)0x6a91);
        case EC_INS_DADKEY_SETW: //test illegal public key
            ((ECPublicKey)eccKey.getPublic()).setW(ec_bad_pubKey, (short)0, (short)ec_bad_pubKey.length);
            try
            {
                ecdsa.init(eccKey.getPublic(), Signature.MODE_VERIFY);
            }catch(CryptoException e)
            {
                if (e.getReason() == CryptoException.ILLEGAL_VALUE)
                    break;
            }
            ISOException.throwIt((short)0x6a91);
        default:
            // good practice: If you don't know the INStruction, say so:
            ISOException.throwIt(ISO7816.SW_INS_NOT_SUPPORTED);
        }
    }
 }
